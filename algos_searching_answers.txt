Given the alphabetically sorted collection in this checkpoint, 
how many iterations would it take to find the value G using linear search?

7


Given the alphabetically sorted collection in this checkpoint,
how many iterations would it take to find the value G using binary search?

3


Calculate fib(10), fib(11), fib(12) by hand.
0,1,1,3,5,8,13,21,
base(9) fib(n-2)13	 fib(n-1)21	fib(n)34
0,1,1,2,5,8,13,21,34
base(10) fib(n-2)21	fib(n-1)34 fib(n)55
0,1,3,5,8,13,21,34,55,89
base(11) fib(n-2)34	fib(n-1)55 fib(n)89
0,1,3,5,8,13,21,34,55,89,144
base(12) fib(n-2)55	fib(n-1)89 fib(n)144



Given an unsorted collection of a million items,
 which algorithm would you choose between linear
  search and binary search? Would you use an iterative 
  or recursive solution? Explain your reasoning.

recursive
linear search becasue  is not assorted doesnt and iterative is faster than recursive
doesnt call the function itself to recalculate the position


Given a sorted collection of a million items, which
 algorithm would you choose between linear search
  and binary search? Would you use an iterative or
   recursive solution? Explain your reasoning.

In an assorted array is better to search with a bynary since its algorithm
Is faster to find the value in a sorted array, iterative algorithm also is faster to find the value
in a sorted array 




Compare the time it takes to run fib(20)
 between the iterative solution from the previous 
 checkpoint and recursive solutions.


eduardos-MBP:AlgoSearch eduardolowensohn$ ruby benchmark.rb
fib_recursive(0): 0
fib_recursive(1): 1
fib_recursive(2): 1
fib_recursive(3): 2
fib_recursive(4): 3
fib_recursive(5): 5
fib_recursive(6): 8
fib_recursive(7): 13
fib_recursive(8): 21
fib_recursive(9): 34
Fib_iterative(0): 0
Fib_iterative(1): 1
Fib_iterative(2): 1
Fib_iterative(3): 2
Fib_iterative(4): 3
Fib_iterative(5): 5
Fib_iterative(6): 8
Fib_iterative(7): 13
Fib_iterative(8): 21
Fib_iterative(9): 34
Fib_iterative(25): 75025
Fib_iterative(100): 354224848179261915075

Iterative is much faster


              user     system      total        real
fibonacci_recursive(20):   0.001966   0.000008   0.001974 (  0.002112)
fibonacci_iterative(20):   0.000020   0.000003   0.000023 (  0.000019)


